package com.oracle.hrb;

import com.netflix.config.ConfigurationManager;
import com.netflix.hystrix.HystrixCommand;
import com.netflix.hystrix.HystrixCommandGroupKey;
import com.netflix.hystrix.HystrixCommandProperties;

/**
 * 断路器关闭模拟
 *  断路器关闭条件
 *  默认：10秒内20个以上的请求有50%的出错，断路器自动关闭
 *
 *
 *
 */
public class OpenTest {

    public static void main(String[] args) {
   //10秒
    ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.circuitBreaker.timeInMilliseconds",20000);
   //如果超过10个请求，熔断
   ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.circuitBreaker.requestVolumeThreshold",10);
   //50%错误
   ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.circuitBreaker.errorThresholdPercentage",10);

        for(int i =0 ;i< 30 ;i ++){
      MyComman c=new MyComman();
      c.execute();
      if(!c.isCircuitBreakerOpen()){//断路器被打开的时候
          System.out.println("断路器打开，执行第"+(i+1)+"个命令");
      }
        }
   }
    static  class  MyComman extends HystrixCommand<String> {

        protected MyComman() {
            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("ExampleCroup")).andCommandPropertiesDefaults(HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(500)));
        }

        @Override
        protected String run() throws Exception {
            Thread.sleep(800);
            return null;
        }


        @Override
        protected String getFallback() {
            return  "超时";
        }
    }
}
